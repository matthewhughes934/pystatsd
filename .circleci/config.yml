version: 2.1

commands:
  install-deps:
    parameters:
      before-install:
        type: steps
        default: []
      after-install:
        type: steps
        default: []
    steps:
      - steps: << parameters.before-install >>
      - run:
          name: Build cache-key
          command: |
            cp requirements-dev.txt pip-cache-key.txt
            python --version --version >> pip-cache-key.txt
      - restore_cache:
          key: pip-cache-v0-{{ checksum "pip-cache-key.txt" }}
      - run:
          name: Install requirements
          command: pip install --requirement requirements-dev.txt --cache-dir .cache/pip .
      - save_cache:
          key: pip-cache-v0-{{ checksum "pip-cache-key.txt" }}
          paths: .cache/pip
      - steps: << parameters.after-install >>

  load_venv:
    steps:
      - attach_workspace:
          at: /tmp/workspace
      - run:
          name: Load virtualenv
          command: |
            cp --recursive /tmp/workspace/.venv .
            echo "export PATH=$PWD/.venv/bin:\$PATH" >> $BASH_ENV
            echo "export VIRTUAL_ENV=$PWD/.venv" >> $BASH_ENV

jobs:
  build-and-test:
    parameters:
      python-version:
        type: string
    docker:
      - image: cimg/python:<< parameters.python-version>>
    steps:
      - checkout
      - install-deps
      - run: pytest

  # gets its own job so we can pass the created virtualenv to other jobs
  build-python-310:
    docker:
      - image: cimg/python:3.10
    steps:
      - checkout
      - install-deps:
          before-install:
            - run:
                name: Setup Virtual Env
                command: |
                  python -m venv .venv
                  echo "export PATH=$PWD/.venv/bin:\$PATH" >> $BASH_ENV
                  echo "export VIRTUAL_ENV=$PWD/.venv" >> $BASH_ENV
          after-install:
            - persist_to_workspace:
                root: .
                paths:
                  - .venv

  test-python-310:
    docker:
      - image: cimg/python:3.10
    steps:
      - checkout
      - load_venv
      - run: pytest

  lint:
    docker:
      - image: cimg/python:3.10
    steps:
      - checkout
      - load_venv
      - run:
          command: |
            cp .pre-commit-config.yaml pre-commit-cache-key.txt
            python --version --version >> pre-commit-cache-key.txt
      - restore_cache:
          key: v1-pc-cache-{{ checksum "pre-commit-cache-key.txt" }}
      - run: pre-commit run --all-files --show-diff-on-failure
      - save_cache:
          key: v1-pc-cache-{{ checksum "pre-commit-cache-key.txt" }}
          paths:
            - ~/.cache/pre-commit

  build-docs:
    docker:
      - image: cimg/python:3.10
    steps:
      - checkout
      - load_venv
      - run:
          name: Build docs
          working_directory: ./docs
          command: make html SPHINXOPTS='-W --keep-going'
      - persist_to_workspace:
          root: ./docs/_build
          paths:
            - html

  deploy-gh-pages:
    docker:
      - image: cimg/base:current
    steps:
      - add_ssh_keys:
          fingerprints:
            - "ce:96:37:12:7d:fc:f8:98:36:18:b0:0d:d3:36:d5:b6"
      - checkout
      - attach_workspace:
          at: /tmp/workspace
      - run:
          name: Deploy docs
          command: |
            git checkout gh-pages
            # remove all old docs files
            git rm -r -- ':(exclude).nojekyll'
            # and replace with the new ones
            (shopt -s dotglob; cp --recursive /tmp/workspace/html/* .)
            git add .

            if ! git diff --cached --quiet
            then
                git config user.name "CircleCI"
                git config user.email "circleci@site.invalid"

                git commit --message "Deploy docs for: $CIRCLE_SHA1"
                git push origin HEAD
            else
                echo "No changes found, skipping deploy"
            fi

workflows:
  test-pythons:
    jobs:
      - build-and-test:
          matrix:
            parameters:
              python-version: ["3.7", "3.8", "3.9"]
      - build-python-310
      - test-python-310:
          requires:
            - build-python-310
      - lint:
          requires:
            - build-python-310
      - build-docs:
          requires:
            - build-python-310
      - deploy-gh-pages:
          requires:
            - build-docs
          filters:
            branches:
              only:
                - master

